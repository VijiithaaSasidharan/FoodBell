#image: rvancea/maven-chrome-jdk8:latest
image: maven:latest

stages:
#   - services
    - build
    - dbpurge
    - test
    - deploy
    
variables:
  # Configure mysql service (https://hub.docker.com/_/mysql/)
  MYSQL_DATABASE: "foodbell"
  MYSQL_ROOT_PASSWORD: "root"
  MYSQL_USER: "root"
  MYSQL_PASSWORD: "root"
  MYSQL_HOST: localhost
  CI: false
#mysql --user=root --password=root

dbpurge:
  image: mysql:latest
  variables:
    GIT_STRATEGY: none
  services:
    - mysql:latest
  script:
    - echo "SELECT 'OK';" | mysql --user=root --password="root" --host=localhost "foodbell"
    #- echo "SHOW tables;" | mysql --user="${MYSQL_USER}" --password="${MYSQL_ROOT_PASSWORD}" --host="${MYSQL_HOST}" "foodbell"
    - echo "delete from foodbell.account where email like '%test%';" | mysql --user=root --password="root" --host=localhost "foodbell"
    - echo "delete from foodbell.customer where customer_email like '%test%';" | mysql --user=root --password="root" --host=localhost "foodbell"
    - echo "delete from foodbell.vendor where vendor_email like '%test%';" | mysql --user=root --password="root" --host=localhost "foodbell"
    - echo "delete from foodbell.subscription where customer_email like '%test%' and vendor_email like '%test%';" | mysql --user=root --password="root" --host=localhost "foodbell"

build:
    tags:
      - ci
    stage: build
    script:
        - echo "Running the build command"
        - cd FoodBellApp
        - set "CI=false"
        - mvn clean install -DskipTests
    artifacts:
      paths:
        - FoodBellApp\OrderMgmntService\target\*.jar
        - FoodBellApp\UIClient\target\*.jar
        - FoodBellApp\UserMgmntService\target\*.jar

test:
  stage: test
  variables:
    GIT_STRATEGY: none
  script:
    - echo "JUnit test cases Execution Started"
    - cd FoodBellApp
    - mvn test
  #artifacts:
  #  paths:
  #    - unitTest.txt

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: never
    - when: always

variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# This template uses jdk8 for verifying and deploying images
image: maven:3.3.9-jdk-8

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

# For merge requests do not `deploy` but only run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
#.verify: &verify
#  stage: test
#  script:
#    - 'mvn $MAVEN_CLI_OPTS verify'
#  except:
#    variables:
#      - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Verify merge requests using JDK8
#verify:jdk8:
#  <<: *verify

# To deploy packages from CI, create a ci_settings.xml file
# For deploying packages to GitLab's Maven Repository: See https://docs.gitlab.com/ee/user/packages/maven_repository/index.html#create-maven-packages-with-gitlab-cicd for more details.
# For `master` branch run `mvn deploy` automatically.
deploy:jdk8:
  stage: deploy
  environment: staging
  variables:
    GIT_STRATEGY: none
  script:
    - mkdir deploy
    - cp FoodBellApp\OrderMgmntService\target\*.jar deploy\
    - cp FoodBellApp\UIClient\target\*.jar deploy\
    - cp FoodBellApp\UserMgmntService\target\*.jar deploy\
    - jar -cfM deploy.zip deploy
    
    #- if [ (! -f ci_settings.xml) ];
    #    then echo "CI settings missing\! If deploying to GitLab Maven Repository, please see https://docs.gitlab.com/ee/user/packages/maven_repository/index.html#create-maven-packages-with-gitlab-cicd for instructions.";
    #  fi
    #-mvn -X package -DskipTests
    #- mvn $MAVEN_CLI_OPTS exec:java -Dexec.mainClass="com.FoodBell.app.App"
    #- rm -fr target/*.original
  
  artifacts:
    paths:
      - deploy.zip
  only:
    variables:
      - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

#maven-verify:
#  stage: test
#  extends: .maven
#  dependencies: [maven-package]
#  script:
#    - mvn $MAVEN_CLI_OPTS verify -Dmaven.main.skip

#docker-image:
#  stage: docker
#  dependencies: [maven-package]
#  [...]
#  before_script:
#    - curl --show-error --silent --location --output "/usr/local/bin/img" "https://github.com/genuinetools/img/releases/download/v0.5.11/img-linux-amd64" && chmod a+x "/usr/local/bin/img" && img --version
#  script:
#    - img build --no-cache -f common/gke.Dockerfile --build-arg JVM_PARAMS=$JVM_PARAMS -t $GCR_IMAGE:$UNIQUE_VERSION target
#    - img push "$GCR_IMAGE:$UNIQUE_VERSION"