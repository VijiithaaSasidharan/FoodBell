image: maven:latest
cache:
    key: maven-$CI_COMMIT_REF_SLUG
    paths:
      - .m2

stages:
    - build
    - test
    - deploy

#image: rvancea/maven-chrome-jdk8:latest 

build:
    tags:
      - ci
    stage: build
    script:
        - echo "Running the build command"
        - cd FoodBellApp
        - mvn clean install -DskipTests 
        #-X


test:
  stage: test
  script:
      echo "JUnit test cases Execution Started"
      - mvn $MAVEN_CLI_OPTS verify org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar -Dsonar.branch.name=$CI_COMMIT_REF_NAME -Dsonar.host.url=$SONAR_URL -Dsonar.login=$SONAR_LOGIN -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
  rules:
      - if: $CI_MERGE_REQUEST_IID

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: never
    - when: always

variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# This template uses jdk8 for verifying and deploying images
image: maven:3.3.9-jdk-8

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

# For merge requests do not `deploy` but only run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
.verify: &verify
  stage: test
  script:
    - 'mvn $MAVEN_CLI_OPTS verify'
  except:
    variables:
      - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Verify merge requests using JDK8
verify:jdk8:
  <<: *verify

# To deploy packages from CI, create a ci_settings.xml file
# For deploying packages to GitLab's Maven Repository: See https://docs.gitlab.com/ee/user/packages/maven_repository/index.html#create-maven-packages-with-gitlab-cicd for more details.
# Please note: The GitLab Maven Repository is currently only available in GitLab Premium / Ultimate.
# For `master` branch run `mvn deploy` automatically.
deploy:jdk8:
  stage: deploy
  environment: staging
  script:
    #- if [ (! -f ci_settings.xml) ];
    #    then echo "CI settings missing\! If deploying to GitLab Maven Repository, please see https://docs.gitlab.com/ee/user/packages/maven_repository/index.html#create-maven-packages-with-gitlab-cicd for instructions.";
    #  fi
    #- 'mvn $MAVEN_CLI_OPTS deploy -s ci_settings.xml'
    #- mvn $MAVEN_CLI_OPTS package
    - mvn package -DskipTests
    - mvn $MAVEN_CLI_OPTS exec:java -Dexec.mainClass="com.FoodBell.app.App"
    - rm -fr target/*.original
  artifacts:
    paths:
      - target/

  only:
    variables:
      - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

#  docker-image:
#    stage: docker
#    dependencies: [deploy]
  
#  before_script:
#    - curl --show-error --silent --location --output "C:\GitLab-Runner\builds\LCs8Y1Tp\0\vseem\ece651_group_26\img" "https://github.com/genuinetools/img/releases/download/v0.5.11/img-linux-amd64" && chmod a+x "C:\GitLab-Runner\builds\LCs8Y1Tp\0\vseem\ece651_group_26\img" && img --version
#    script:
#      - img build --no-cache -f common/gke.Dockerfile --build-arg JVM_PARAMS=$JVM_PARAMS -t $GCR_IMAGE:$UNIQUE_VERSION target
#      - img push "$GCR_IMAGE:$UNIQUE_VERSION"